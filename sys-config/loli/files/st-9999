/* http://freedesktop.org/software/fontconfig/fontconfig-user.html */
char font[] = "ProTamsyn2x:pixelsize=24:antialias=false:hinting=false";

/* disable bold, italic and roman fonts globally */
int disablebold = 1;
int disableitalic = 1;
int disableroman = 1;

int borderpx = 2;

/*
 * what program is execed by st depends of these precedence rules:
 * 1: program passed with -e
 * 2: utmp option
 * 3: SHELL environment variable
 * 4: value of shell in /etc/passwd
 * 5: value of shell in config.h
 */
char shell[] = "/bin/sh";
char *utmp = 0;
char stty_args[] = "stty raw pass8 nl -echo -iexten -cstopb 38400";

/* identification sequence returned in DA and DECID */
char vtiden[] = "\033[?6c";

/* kerning / character bounding-box multipliers */
float cwscale = 1.0;
float chscale = 1.0;

/*
 * word delimiter string
 * more advanced example: " `'\"()[]{}"
 */
char worddelimiters[] = " ";

/* selection timeouts (in milliseconds) */
unsigned doubleclicktimeout = 300;
unsigned tripleclicktimeout = 600;

/* alt screens */
int allowaltscreen = 1;

/* frames per second st should at maximum draw to the screen */
unsigned xfps = 120;
unsigned actionfps = 30;

/*
 * blinking timeout (set to 0 to disable blinking) for the terminal blinking
 * attribute.
 */
unsigned blinktimeout = 800;

/*
 * thickness of underline and bar cursors
 */
unsigned cursorthickness = 2;

/*
 * bell volume. It must be a value between -100 and 100. Use 0 for disabling
 * it
 */
int bellvolume = 0;

/* default TERM value */
char termname[] = "st-256color";

/*
 * spaces per tab
 *
 * when you are changing this value, don't forget to adapt the »it« value in
 * the st.info and appropriately install the st.info in the environment where
 * you use this st version.
 *
 *  it#$tabspaces,
 *
 * secondly make sure your kernel is not expanding tabs. When running `stty
 * -a` »tab0« should appear. You can tell the terminal to not expand tabs by
 *  running following command:
 *
 *  stty tabs
 */
unsigned tabspaces = 8;

/* terminal colors (16 first used in escape sequence) */
const char *colorname[] = {
    /* 8 normal colors */
    "black",
    "red3",
    "green3",
    "yellow3",
    "blue2",
    "magenta3",
    "cyan3",
    "gray90",

    /* 8 bright colors */
    "gray50",
    "red",
    "green",
    "yellow",
    "#5c5cff",
    "magenta",
    "cyan",
    "white",

    [255] = 0,

    /* more colors can be added after 255 to use with DefaultXX */
    "#cccccc",
    "#555555",
};


/*
 * default colors (colorname index)
 * foreground, background, cursor, reverse cursor
 */
unsigned defaultfg = 7;
unsigned defaultbg = 0;
unsigned defaultcs = 256;
unsigned defaultrcs = 257;

/*
 * default shape of cursor
 * 2: block ("█")
 * 4: underline ("_")
 * 6: bar ("|")
 * 7: snowman ("☃")
 */
unsigned cursorshape = 2;

/* default columns and rows numbers */
unsigned cols = 80;
unsigned rows = 24;

/* default colour and shape of the mouse cursor */
unsigned mouseshape = XC_xterm;
unsigned mousefg = 7;
unsigned mousebg = 0;

/*
 * color used to display font attributes when fontconfig selected a font which
 * doesn't match the ones requested
 */
unsigned defaultattr = 11;

/*
 * internal mouse shortcuts.
 * beware that overloading Button1 will disable the selection
 */
MouseShortcut mshortcuts[] = {
    /* button  mask        string */
    { Button4, XK_ANY_MOD, "\031" },
    { Button5, XK_ANY_MOD, "\005" },
};

/* internal keyboard shortcuts */
#define C ControlMask
#define S ShiftMask
#define MODKEY Mod1Mask
#define TERMMOD (C|S)

Shortcut shortcuts[] = {
    /* mask       keysym       function       argument */
    { XK_ANY_MOD, XK_Break,    sendbreak,     {.i =  0} },
    { C,          XK_Print,    toggleprinter, {.i =  0} },
    { S,          XK_Print,    printscreen,   {.i =  0} },
    { XK_ANY_MOD, XK_Print,    printsel,      {.i =  0} },
    { TERMMOD,    XK_Prior,    zoom,          {.f = +1} },
    { TERMMOD,    XK_Next,     zoom,          {.f = -1} },
    { TERMMOD,    XK_Home,     zoomreset,     {.f =  0} },
    { TERMMOD,    XK_C,        clipcopy,      {.i =  0} },
    { TERMMOD,    XK_V,        clippaste,     {.i =  0} },
    { TERMMOD,    XK_Y,        selpaste,      {.i =  0} },
    { TERMMOD,    XK_Num_Lock, numlock,       {.i =  0} },
    { TERMMOD,    XK_I,        iso14755,      {.i =  0} },
};

/*
 * special keys (change & recompile st.info accordingly)
 *
 * mask value:
 * - use XK_ANY_MOD to match the key no matter modifiers state
 * - use XK_NO_MOD to match the key alone (no modifiers)
 * appkey value:
 * - 0: no value
 * - > 0: keypad application mode enabled
 * -   = 2: term.numlock = 1
 * - < 0: keypad application mode disabled
 * appcursor value:
 * - 0: no value
 * - > 0: cursor application mode enabled
 * - < 0: cursor application mode disabled
 * crlf value
 * - 0: no value
 * - > 0: crlf mode is enabled
 * - < 0: crlf mode is disabled
 *
 * be careful with the order of the definitions because st searches in
 * this table sequentially, so any XK_ANY_MOD must be in the last
 * position for a key
 */

/*
 * if you want keys other than the X11 function keys (0xFD00 - 0xFFFF)
 * to be mapped below, add them to this array
 */
KeySym mappedkeys[] = { -1 };

/*
 * state bits to ignore when matching key or button events.  by default,
 * numlock (Mod2Mask) and keyboard layout (XK_SWITCH_MOD) are ignored
 */
unsigned ignoremod = Mod2Mask|XK_SWITCH_MOD;

/*
 * override mouse-select while mask is active (when MODE_MOUSE is set).
 * note that if you want to use shiftmask with selmasks, set this to an other
 * modifier, set to 0 to not use it
 */
unsigned forceselmod = S;

/*
 * this is the huge key array which defines all compatibility to the Linux
 * world. please decide about changes wisely
 */
Key key[] = {
    /* keysym           mask            string      appkey appcursor crlf */
    { XK_KP_Home,       S,            "\033[2J",       0,   -1,    0},
    { XK_KP_Home,       S,            "\033[1;2H",     0,   +1,    0},
    { XK_KP_Home,       XK_ANY_MOD,   "\033[H",        0,   -1,    0},
    { XK_KP_Home,       XK_ANY_MOD,   "\033[1~",       0,   +1,    0},
    { XK_KP_Up,         XK_ANY_MOD,   "\033Ox",       +1,    0,    0},
    { XK_KP_Up,         XK_ANY_MOD,   "\033[A",        0,   -1,    0},
    { XK_KP_Up,         XK_ANY_MOD,   "\033OA",        0,   +1,    0},
    { XK_KP_Down,       XK_ANY_MOD,   "\033Or",       +1,    0,    0},
    { XK_KP_Down,       XK_ANY_MOD,   "\033[B",        0,   -1,    0},
    { XK_KP_Down,       XK_ANY_MOD,   "\033OB",        0,   +1,    0},
    { XK_KP_Left,       XK_ANY_MOD,   "\033Ot",       +1,    0,    0},
    { XK_KP_Left,       XK_ANY_MOD,   "\033[D",        0,   -1,    0},
    { XK_KP_Left,       XK_ANY_MOD,   "\033OD",        0,   +1,    0},
    { XK_KP_Right,      XK_ANY_MOD,   "\033Ov",       +1,    0,    0},
    { XK_KP_Right,      XK_ANY_MOD,   "\033[C",        0,   -1,    0},
    { XK_KP_Right,      XK_ANY_MOD,   "\033OC",        0,   +1,    0},
    { XK_KP_Prior,      S,            "\033[5;2~",     0,    0,    0},
    { XK_KP_Prior,      XK_ANY_MOD,   "\033[5~",       0,    0,    0},
    { XK_KP_Begin,      XK_ANY_MOD,   "\033[E",        0,    0,    0},
    { XK_KP_End,        C,            "\033[J",       -1,    0,    0},
    { XK_KP_End,        C,            "\033[1;5F",    +1,    0,    0},
    { XK_KP_End,        S,            "\033[K",       -1,    0,    0},
    { XK_KP_End,        S,            "\033[1;2F",    +1,    0,    0},
    { XK_KP_End,        XK_ANY_MOD,   "\033[4~",       0,    0,    0},
    { XK_KP_Next,       S,            "\033[6;2~",     0,    0,    0},
    { XK_KP_Next,       XK_ANY_MOD,   "\033[6~",       0,    0,    0},
    { XK_KP_Insert,     S,            "\033[2;2~",    +1,    0,    0},
    { XK_KP_Insert,     S,            "\033[4l",      -1,    0,    0},
    { XK_KP_Insert,     C,            "\033[L",       -1,    0,    0},
    { XK_KP_Insert,     C,            "\033[2;5~",    +1,    0,    0},
    { XK_KP_Insert,     XK_ANY_MOD,   "\033[4h",      -1,    0,    0},
    { XK_KP_Insert,     XK_ANY_MOD,   "\033[2~",      +1,    0,    0},
    { XK_KP_Delete,     C,            "\033[M",       -1,    0,    0},
    { XK_KP_Delete,     C,            "\033[3;5~",    +1,    0,    0},
    { XK_KP_Delete,     S,            "\033[2K",      -1,    0,    0},
    { XK_KP_Delete,     S,            "\033[3;2~",    +1,    0,    0},
    { XK_KP_Delete,     XK_ANY_MOD,   "\033[P",       -1,    0,    0},
    { XK_KP_Delete,     XK_ANY_MOD,   "\033[3~",      +1,    0,    0},
    { XK_KP_Multiply,   XK_ANY_MOD,   "\033Oj",       +2,    0,    0},
    { XK_KP_Add,        XK_ANY_MOD,   "\033Ok",       +2,    0,    0},
    { XK_KP_Enter,      XK_ANY_MOD,   "\033OM",       +2,    0,    0},
    { XK_KP_Enter,      XK_ANY_MOD,   "\r",           -1,    0,   -1},
    { XK_KP_Enter,      XK_ANY_MOD,   "\r\n",         -1,    0,   +1},
    { XK_KP_Subtract,   XK_ANY_MOD,   "\033Om",       +2,    0,    0},
    { XK_KP_Decimal,    XK_ANY_MOD,   "\033On",       +2,    0,    0},
    { XK_KP_Divide,     XK_ANY_MOD,   "\033Oo",       +2,    0,    0},
    { XK_KP_0,          XK_ANY_MOD,   "\033Op",       +2,    0,    0},
    { XK_KP_1,          XK_ANY_MOD,   "\033Oq",       +2,    0,    0},
    { XK_KP_2,          XK_ANY_MOD,   "\033Or",       +2,    0,    0},
    { XK_KP_3,          XK_ANY_MOD,   "\033Os",       +2,    0,    0},
    { XK_KP_4,          XK_ANY_MOD,   "\033Ot",       +2,    0,    0},
    { XK_KP_5,          XK_ANY_MOD,   "\033Ou",       +2,    0,    0},
    { XK_KP_6,          XK_ANY_MOD,   "\033Ov",       +2,    0,    0},
    { XK_KP_7,          XK_ANY_MOD,   "\033Ow",       +2,    0,    0},
    { XK_KP_8,          XK_ANY_MOD,   "\033Ox",       +2,    0,    0},
    { XK_KP_9,          XK_ANY_MOD,   "\033Oy",       +2,    0,    0},
    { XK_Up,            S,            "\033[1;2A",     0,    0,    0},
    { XK_Up,            Mod1Mask,     "\033[1;3A",     0,    0,    0},
    { XK_Up,            S|Mod1Mask,   "\033[1;4A",     0,    0,    0},
    { XK_Up,            C,            "\033[1;5A",     0,    0,    0},
    { XK_Up,            S|C,          "\033[1;6A",     0,    0,    0},
    { XK_Up,            C|Mod1Mask,   "\033[1;7A",     0,    0,    0},
    { XK_Up,            S|C|Mod1Mask, "\033[1;8A",     0,    0,    0},
    { XK_Up,            XK_ANY_MOD,   "\033[A",        0,   -1,    0},
    { XK_Up,            XK_ANY_MOD,   "\033OA",        0,   +1,    0},
    { XK_Down,          S,            "\033[1;2B",     0,    0,    0},
    { XK_Down,          Mod1Mask,     "\033[1;3B",     0,    0,    0},
    { XK_Down,          S|Mod1Mask,   "\033[1;4B",     0,    0,    0},
    { XK_Down,          C,            "\033[1;5B",     0,    0,    0},
    { XK_Down,          S|C,          "\033[1;6B",     0,    0,    0},
    { XK_Down,          C|Mod1Mask,   "\033[1;7B",     0,    0,    0},
    { XK_Down,          S|C|Mod1Mask, "\033[1;8B",     0,    0,    0},
    { XK_Down,          XK_ANY_MOD,   "\033[B",        0,   -1,    0},
    { XK_Down,          XK_ANY_MOD,   "\033OB",        0,   +1,    0},
    { XK_Left,          S,            "\033[1;2D",     0,    0,    0},
    { XK_Left,          Mod1Mask,     "\033[1;3D",     0,    0,    0},
    { XK_Left,          S|Mod1Mask,   "\033[1;4D",     0,    0,    0},
    { XK_Left,          C,            "\033[1;5D",     0,    0,    0},
    { XK_Left,          S|C,          "\033[1;6D",     0,    0,    0},
    { XK_Left,          C|Mod1Mask,   "\033[1;7D",     0,    0,    0},
    { XK_Left,          S|C|Mod1Mask, "\033[1;8D",     0,    0,    0},
    { XK_Left,          XK_ANY_MOD,   "\033[D",        0,   -1,    0},
    { XK_Left,          XK_ANY_MOD,   "\033OD",        0,   +1,    0},
    { XK_Right,         S,            "\033[1;2C",     0,    0,    0},
    { XK_Right,         Mod1Mask,     "\033[1;3C",     0,    0,    0},
    { XK_Right,         S|Mod1Mask,   "\033[1;4C",     0,    0,    0},
    { XK_Right,         C,            "\033[1;5C",     0,    0,    0},
    { XK_Right,         S|C,          "\033[1;6C",     0,    0,    0},
    { XK_Right,         C|Mod1Mask,   "\033[1;7C",     0,    0,    0},
    { XK_Right,         S|C|Mod1Mask, "\033[1;8C",     0,    0,    0},
    { XK_Right,         XK_ANY_MOD,   "\033[C",        0,   -1,    0},
    { XK_Right,         XK_ANY_MOD,   "\033OC",        0,   +1,    0},
    { XK_ISO_Left_Tab,  S,            "\033[Z",        0,    0,    0},
    { XK_Return,        Mod1Mask,     "\033\r",        0,    0,   -1},
    { XK_Return,        Mod1Mask,     "\033\r\n",      0,    0,   +1},
    { XK_Return,        XK_ANY_MOD,   "\r",            0,    0,   -1},
    { XK_Return,        XK_ANY_MOD,   "\r\n",          0,    0,   +1},
    { XK_Insert,        S,            "\033[4l",      -1,    0,    0},
    { XK_Insert,        S,            "\033[2;2~",    +1,    0,    0},
    { XK_Insert,        C,            "\033[L",       -1,    0,    0},
    { XK_Insert,        C,            "\033[2;5~",    +1,    0,    0},
    { XK_Insert,        XK_ANY_MOD,   "\033[4h",      -1,    0,    0},
    { XK_Insert,        XK_ANY_MOD,   "\033[2~",      +1,    0,    0},
    { XK_Delete,        C,            "\033[M",       -1,    0,    0},
    { XK_Delete,        C,            "\033[3;5~",    +1,    0,    0},
    { XK_Delete,        S,            "\033[2K",      -1,    0,    0},
    { XK_Delete,        S,            "\033[3;2~",    +1,    0,    0},
    { XK_Delete,        XK_ANY_MOD,   "\033[P",       -1,    0,    0},
    { XK_Delete,        XK_ANY_MOD,   "\033[3~",      +1,    0,    0},
    { XK_Delete,        XK_NO_MOD,    "\177",          0,    0,    0},
    { XK_BackSpace,     Mod1Mask,     "\033\177",      0,    0,    0},
    { XK_Home,          S,            "\033[2J",       0,   -1,    0},
    { XK_Home,          S,            "\033[1;2H",     0,   +1,    0},
    { XK_Home,          XK_ANY_MOD,   "\033[H",        0,   -1,    0},
    { XK_Home,          XK_ANY_MOD,   "\033[1~",       0,   +1,    0},
    { XK_End,           C,            "\033[J",       -1,    0,    0},
    { XK_End,           C,            "\033[1;5F",    +1,    0,    0},
    { XK_End,           S,            "\033[K",       -1,    0,    0},
    { XK_End,           S,            "\033[1;2F",    +1,    0,    0},
    { XK_End,           XK_ANY_MOD,   "\033[4~",       0,    0,    0},
    { XK_Prior,         C,            "\033[5;5~",     0,    0,    0},
    { XK_Prior,         S,            "\033[5;2~",     0,    0,    0},
    { XK_Prior,         XK_ANY_MOD,   "\033[5~",       0,    0,    0},
    { XK_Next,          C,            "\033[6;5~",     0,    0,    0},
    { XK_Next,          S,            "\033[6;2~",     0,    0,    0},
    { XK_Next,          XK_ANY_MOD,   "\033[6~",       0,    0,    0},
    { XK_F1,            XK_NO_MOD,    "\033OP" ,       0,    0,    0},
    { XK_F1, /* F13 */  S,            "\033[1;2P",     0,    0,    0},
    { XK_F1, /* F25 */  C,            "\033[1;5P",     0,    0,    0},
    { XK_F1, /* F37 */  Mod4Mask,     "\033[1;6P",     0,    0,    0},
    { XK_F1, /* F49 */  Mod1Mask,     "\033[1;3P",     0,    0,    0},
    { XK_F1, /* F61 */  Mod3Mask,     "\033[1;4P",     0,    0,    0},
    { XK_F2,            XK_NO_MOD,    "\033OQ" ,       0,    0,    0},
    { XK_F2, /* F14 */  S,            "\033[1;2Q",     0,    0,    0},
    { XK_F2, /* F26 */  C,            "\033[1;5Q",     0,    0,    0},
    { XK_F2, /* F38 */  Mod4Mask,     "\033[1;6Q",     0,    0,    0},
    { XK_F2, /* F50 */  Mod1Mask,     "\033[1;3Q",     0,    0,    0},
    { XK_F2, /* F62 */  Mod3Mask,     "\033[1;4Q",     0,    0,    0},
    { XK_F3,            XK_NO_MOD,    "\033OR" ,       0,    0,    0},
    { XK_F3, /* F15 */  S,            "\033[1;2R",     0,    0,    0},
    { XK_F3, /* F27 */  C,            "\033[1;5R",     0,    0,    0},
    { XK_F3, /* F39 */  Mod4Mask,     "\033[1;6R",     0,    0,    0},
    { XK_F3, /* F51 */  Mod1Mask,     "\033[1;3R",     0,    0,    0},
    { XK_F3, /* F63 */  Mod3Mask,     "\033[1;4R",     0,    0,    0},
    { XK_F4,            XK_NO_MOD,    "\033OS" ,       0,    0,    0},
    { XK_F4, /* F16 */  S,            "\033[1;2S",     0,    0,    0},
    { XK_F4, /* F28 */  C,            "\033[1;5S",     0,    0,    0},
    { XK_F4, /* F40 */  Mod4Mask,     "\033[1;6S",     0,    0,    0},
    { XK_F4, /* F52 */  Mod1Mask,     "\033[1;3S",     0,    0,    0},
    { XK_F5,            XK_NO_MOD,    "\033[15~",      0,    0,    0},
    { XK_F5, /* F17 */  S,            "\033[15;2~",    0,    0,    0},
    { XK_F5, /* F29 */  C,            "\033[15;5~",    0,    0,    0},
    { XK_F5, /* F41 */  Mod4Mask,     "\033[15;6~",    0,    0,    0},
    { XK_F5, /* F53 */  Mod1Mask,     "\033[15;3~",    0,    0,    0},
    { XK_F6,            XK_NO_MOD,    "\033[17~",      0,    0,    0},
    { XK_F6, /* F18 */  S,            "\033[17;2~",    0,    0,    0},
    { XK_F6, /* F30 */  C,            "\033[17;5~",    0,    0,    0},
    { XK_F6, /* F42 */  Mod4Mask,     "\033[17;6~",    0,    0,    0},
    { XK_F6, /* F54 */  Mod1Mask,     "\033[17;3~",    0,    0,    0},
    { XK_F7,            XK_NO_MOD,    "\033[18~",      0,    0,    0},
    { XK_F7, /* F19 */  S,            "\033[18;2~",    0,    0,    0},
    { XK_F7, /* F31 */  C,            "\033[18;5~",    0,    0,    0},
    { XK_F7, /* F43 */  Mod4Mask,     "\033[18;6~",    0,    0,    0},
    { XK_F7, /* F55 */  Mod1Mask,     "\033[18;3~",    0,    0,    0},
    { XK_F8,            XK_NO_MOD,    "\033[19~",      0,    0,    0},
    { XK_F8, /* F20 */  S,            "\033[19;2~",    0,    0,    0},
    { XK_F8, /* F32 */  C,            "\033[19;5~",    0,    0,    0},
    { XK_F8, /* F44 */  Mod4Mask,     "\033[19;6~",    0,    0,    0},
    { XK_F8, /* F56 */  Mod1Mask,     "\033[19;3~",    0,    0,    0},
    { XK_F9,            XK_NO_MOD,    "\033[20~",      0,    0,    0},
    { XK_F9, /* F21 */  S,            "\033[20;2~",    0,    0,    0},
    { XK_F9, /* F33 */  C,            "\033[20;5~",    0,    0,    0},
    { XK_F9, /* F45 */  Mod4Mask,     "\033[20;6~",    0,    0,    0},
    { XK_F9, /* F57 */  Mod1Mask,     "\033[20;3~",    0,    0,    0},
    { XK_F10,           XK_NO_MOD,    "\033[21~",      0,    0,    0},
    { XK_F10, /* F22 */ S,            "\033[21;2~",    0,    0,    0},
    { XK_F10, /* F34 */ C,            "\033[21;5~",    0,    0,    0},
    { XK_F10, /* F46 */ Mod4Mask,     "\033[21;6~",    0,    0,    0},
    { XK_F10, /* F58 */ Mod1Mask,     "\033[21;3~",    0,    0,    0},
    { XK_F11,           XK_NO_MOD,    "\033[23~",      0,    0,    0},
    { XK_F11, /* F23 */ S,            "\033[23;2~",    0,    0,    0},
    { XK_F11, /* F35 */ C,            "\033[23;5~",    0,    0,    0},
    { XK_F11, /* F47 */ Mod4Mask,     "\033[23;6~",    0,    0,    0},
    { XK_F11, /* F59 */ Mod1Mask,     "\033[23;3~",    0,    0,    0},
    { XK_F12,           XK_NO_MOD,    "\033[24~",      0,    0,    0},
    { XK_F12, /* F24 */ S,            "\033[24;2~",    0,    0,    0},
    { XK_F12, /* F36 */ C,            "\033[24;5~",    0,    0,    0},
    { XK_F12, /* F48 */ Mod4Mask,     "\033[24;6~",    0,    0,    0},
    { XK_F12, /* F60 */ Mod1Mask,     "\033[24;3~",    0,    0,    0},
    { XK_F13,           XK_NO_MOD,    "\033[1;2P",     0,    0,    0},
    { XK_F14,           XK_NO_MOD,    "\033[1;2Q",     0,    0,    0},
    { XK_F15,           XK_NO_MOD,    "\033[1;2R",     0,    0,    0},
    { XK_F16,           XK_NO_MOD,    "\033[1;2S",     0,    0,    0},
    { XK_F17,           XK_NO_MOD,    "\033[15;2~",    0,    0,    0},
    { XK_F18,           XK_NO_MOD,    "\033[17;2~",    0,    0,    0},
    { XK_F19,           XK_NO_MOD,    "\033[18;2~",    0,    0,    0},
    { XK_F20,           XK_NO_MOD,    "\033[19;2~",    0,    0,    0},
    { XK_F21,           XK_NO_MOD,    "\033[20;2~",    0,    0,    0},
    { XK_F22,           XK_NO_MOD,    "\033[21;2~",    0,    0,    0},
    { XK_F23,           XK_NO_MOD,    "\033[23;2~",    0,    0,    0},
    { XK_F24,           XK_NO_MOD,    "\033[24;2~",    0,    0,    0},
    { XK_F25,           XK_NO_MOD,    "\033[1;5P",     0,    0,    0},
    { XK_F26,           XK_NO_MOD,    "\033[1;5Q",     0,    0,    0},
    { XK_F27,           XK_NO_MOD,    "\033[1;5R",     0,    0,    0},
    { XK_F28,           XK_NO_MOD,    "\033[1;5S",     0,    0,    0},
    { XK_F29,           XK_NO_MOD,    "\033[15;5~",    0,    0,    0},
    { XK_F30,           XK_NO_MOD,    "\033[17;5~",    0,    0,    0},
    { XK_F31,           XK_NO_MOD,    "\033[18;5~",    0,    0,    0},
    { XK_F32,           XK_NO_MOD,    "\033[19;5~",    0,    0,    0},
    { XK_F33,           XK_NO_MOD,    "\033[20;5~",    0,    0,    0},
    { XK_F34,           XK_NO_MOD,    "\033[21;5~",    0,    0,    0},
    { XK_F35,           XK_NO_MOD,    "\033[23;5~",    0,    0,    0},
};

#undef C
#undef S

/*
 * selection types' masks
 * use the same masks as usual
 * button1Mask is always unset, to make masks match between ButtonPress
 * buttonRelease and MotionNotify
 * if no match is found, regular selection is used
 */
unsigned selmasks[] = {
    [SEL_RECTANGULAR] = Mod1Mask,
};

/*
 * printable characters in ascii, used to estimate the advance width
 * of single wide characters
 */
char ascii_printable[] =
    " !\"#$%&'()*+,-./0123456789:;<=>?"
    "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
    "`abcdefghijklmnopqrstuvwxyz{|}~";

/* vim: set syntax=c : */
