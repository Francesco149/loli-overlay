--- /dev/null	2017-05-13 21:16:42.822937665 +0700
+++ b/Telegram/CMakeLists.txt	2017-05-14 05:50:30.737400259 +0700
@@ -0,0 +1,161 @@
+cmake_minimum_required(VERSION 3.6)
+
+project(TelegramDesktop)
+
+set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/gyp ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
+
+set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
+
+set(CMAKE_INCLUDE_CURRENT_DIR ON)
+set(CMAKE_AUTOMOC ON)
+set(CMAKE_AUTORCC ON)
+
+find_package(Qt5 REQUIRED COMPONENTS Core Gui Widgets Network)
+get_target_property(QTCORE_INCLUDE_DIRS Qt5::Core INTERFACE_INCLUDE_DIRECTORIES)
+list(GET QTCORE_INCLUDE_DIRS 0 QT_INCLUDE_DIR)
+
+foreach(__qt_module IN ITEMS QtCore QtGui)
+    list(APPEND QT_PRIVATE_INCLUDE_DIRS
+        ${QT_INCLUDE_DIR}/${__qt_module}/${Qt5_VERSION})
+    list(APPEND QT_PRIVATE_INCLUDE_DIRS
+        ${QT_INCLUDE_DIR}/${__qt_module}/${Qt5_VERSION}/${__qt_module})
+endforeach()
+message(STATUS "Using Qt private include directories: ${QT_PRIVATE_INCLUDE_DIRS}")
+
+find_package(PkgConfig REQUIRED)
+
+pkg_check_modules(FFMPEG REQUIRED libavformat libavcodec libswresample libswscale libavutil)
+pkg_check_modules(OPUS REQUIRED opus)
+pkg_check_modules(LIBDRM REQUIRED libdrm)
+pkg_check_modules(LIBVA REQUIRED libva-x11 libva-drm libva)
+pkg_check_modules(MINIZIP REQUIRED minizip)
+
+pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
+pkg_check_modules(APPINDICATOR REQUIRED appindicator3-0.1)
+
+find_package(ZLIB REQUIRED)
+
+find_package(Threads REQUIRED)
+find_package(OpenAL REQUIRED)
+find_package(OpenSSL REQUIRED)
+find_package(LibLZMA REQUIRED)
+find_package(X11 REQUIRED)
+
+set(TGVOIP_LIBS ${CMAKE_SOURCE_DIR}/ThirdParty/libtgvoip/libtgvoip.a dl opus)
+
+set(TGVOIP_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/libtgvoip)
+set(GSL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/GSL/include)
+set(VARIANT_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/variant/include)
+
+set(TELEGRAM_SOURCES_DIR ${CMAKE_SOURCE_DIR}/SourceFiles)
+set(TELEGRAM_RESOURCES_DIR ${CMAKE_SOURCE_DIR}/Resources)
+include_directories(${TELEGRAM_SOURCES_DIR})
+
+set(GENERATED_DIR ${CMAKE_BINARY_DIR}/generated)
+file(MAKE_DIRECTORY ${GENERATED_DIR})
+
+include(ExternalProject)
+
+ExternalProject_Add(libtgvoip
+	PREFIX ${CMAKE_SOURCE_DIR}/ThirdParty/libtgvoip
+	SOURCE_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/libtgvoip
+	BUILD_IN_SOURCE 1
+)
+
+find_package(Breakpad REQUIRED)
+
+include(TelegramCodegenTools)
+include(TelegramCodegen)
+
+set(QRC_FILES
+    Resources/qrc/telegram.qrc
+    Resources/qrc/telegram_emoji.qrc
+    Resources/qrc/telegram_emoji_large.qrc
+    # This only disables system plugin search path
+    # We do not want this behavior for system build
+    #Resources/qrc/telegram_linux.qrc
+)
+
+file(GLOB FLAT_SOURCE_FILES SourceFiles/*.cpp SourceFiles/*.h)
+# We do not want to include Qt plugins statically
+list(REMOVE_ITEM FLAT_SOURCE_FILES ${CMAKE_SOURCE_DIR}/SourceFiles/qt_static_plugins.cpp)
+
+file(GLOB_RECURSE SUBDIRS_SOURCE_FILES
+    SourceFiles/qt_functions.cpp
+    SourceFiles/base/*.cpp SourceFiles/base/*.h
+    SourceFiles/boxes/*.cpp SourceFiles/boxes/*h
+    SourceFiles/calls/*.cpp SourceFiles/calls/*.h
+    SourceFiles/core/*.cpp SourceFiles/core/*.h
+    SourceFiles/chat_helpers/*.cpp SourceFiles/chat_helpers/*.h
+    SourceFiles/data/*.cpp SourceFiles/data/*.h
+    SourceFiles/dialogs/*.cpp SourceFiles/dialogs/*.h
+    SourceFiles/history/*.cpp SourceFiles/history/*.h
+    SourceFiles/inline_bots/*.cpp SourceFiles/inline_bots/*.h
+    SourceFiles/intro/*.cpp SourceFiles/intro/*.h
+    SourceFiles/media/*.cpp SourceFiles/media/*.h
+    SourceFiles/mtproto/*.cpp SourceFiles/mtproto/*.h
+    SourceFiles/overview/*.cpp SourceFiles/overview/*.h
+    SourceFiles/platform/linux/*.cpp SourceFiles/platform/linux/*.h
+    SourceFiles/profile/*.cpp SourceFiles/profile/*.h
+    SourceFiles/settings/*.cpp SourceFiles/settings/*.h
+    SourceFiles/storage/*.cpp SourceFiles/storage/*.h
+    SourceFiles/ui/*.cpp SourceFiles/ui/*.h
+    SourceFiles/window/*.cpp SourceFiles/window/*.h)
+
+add_executable(Telegram WIN32 ${QRC_FILES} ${FLAT_SOURCE_FILES} ${SUBDIRS_SOURCE_FILES})
+
+target_link_libraries(Telegram
+    Qt5::Widgets
+    Qt5::Network
+    Threads::Threads
+    OpenSSL::SSL
+    OpenSSL::Crypto
+    breakpad
+    ${FFMPEG_LIBRARIES}
+    ${OPUS_LIBRARIES}
+    ${LIBVA_LIBRARIES}
+    ${LIBDRM_LIBRARIES}
+    ${ZLIB_LIBRARY_RELEASE}
+    ${GTK3_LIBRARIES}
+    ${TGVOIP_LIBS}
+    ${MINIZIP_LIBRARIES}
+    ${OPENAL_LIBRARY}
+    ${APPINDICATOR_LIBRARIES}
+    ${LIBLZMA_LIBRARIES}
+    ${X11_X11_LIB})
+target_include_directories(Telegram PUBLIC
+    ${QT_PRIVATE_INCLUDE_DIRS}
+    ${FFMPEG_INCLUDE_DIRS}
+    ${OPUS_INCLUDE_DIRS}
+    ${LIBVA_INCLUDE_DIRS}
+    ${LIBDRM_INCLUDE_DIRS}
+    ${ZLIB_INCLUDE_DIR}
+    ${GTK3_INCLUDE_DIRS}
+    ${TGVOIP_INCLUDE_DIR}
+    ${GSL_INCLUDE_DIR}
+    ${VARIANT_INCLUDE_DIR}
+    ${MINIZIP_INCLUDE_DIRS}
+    ${OPENAL_INCLUDE_DIR}
+    ${APPINDICATOR_INCLUDE_DIRS}
+    ${LIBLZMA_INCLUDE_DIRS}
+    ${GENERATED_DIR})
+
+target_sources(Telegram PRIVATE ${TELEGRAM_GENERATED_SOURCES})
+add_dependencies(Telegram telegram_codegen)
+
+include(PrecompiledHeader)
+add_precompiled_header(Telegram SourceFiles/stdafx.h
+	[SOURCE_CXX SourceFiles/stdafx.cpp])
+
+target_compile_definitions(Telegram PUBLIC
+    Q_OS_LINUX64
+    TDESKTOP_DISABLE_UNITY_INTEGRATION
+    TDESKTOP_DISABLE_AUTOUPDATE
+    __STDC_FORMAT_MACROS)
+
+set_target_properties(Telegram PROPERTIES AUTOMOC_MOC_OPTIONS -bTelegram_pch/stdafx.h)
+
+install(TARGETS Telegram RUNTIME DESTINATION bin)
+install(PROGRAMS ${CMAKE_SOURCE_DIR}/../lib/xdg/telegram-desktop.desktop DESTINATION share/applications)
--- /dev/null
+++ b/Telegram/cmake/FindBreakpad.cmake
@@ -0,0 +1,20 @@
+
+find_path(BREAKPAD_INCLUDE_DIRS
+    NAMES client/linux/handler/exception_handler.h
+    PATHS
+    ${BREAKPAD_INCLUDE_DIR})
+
+find_library(BREAKPAD_CLIENT_LIBRARY
+    NAMES breakpad_client
+    PATHS
+    ${BREAKPAD_LIBRARY_DIR}
+)
+
+find_package_handle_standard_args(Breakpad DEFAULT_MSG
+    BREAKPAD_CLIENT_LIBRARY BREAKPAD_INCLUDE_DIRS)
+
+add_library(breakpad STATIC IMPORTED)
+add_dependencies(breakpad breakpad_build)
+
+set_property(TARGET breakpad PROPERTY IMPORTED_LOCATION ${BREAKPAD_CLIENT_LIBRARY})
+set_property(TARGET breakpad PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${BREAKPAD_INCLUDE_DIRS})
--- /dev/null
+++ b/Telegram/cmake/TelegramCodegen.cmake
@@ -0,0 +1,63 @@
+
+set(TELEGRAM_GENERATED_SOURCES)
+
+add_custom_command(
+    OUTPUT ${GENERATED_DIR}/scheme.h ${GENERATED_DIR}/scheme.cpp
+    COMMAND python ${TELEGRAM_SOURCES_DIR}/codegen/scheme/codegen_scheme.py -o${GENERATED_DIR} ${TELEGRAM_RESOURCES_DIR}/scheme.tl
+    DEPENDS ${CMAKE_SOURCE_DIR}/Resources/scheme.tl
+    COMMENT "Codegen scheme.tl"
+)
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_DIR}/scheme.h)
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_DIR}/scheme.cpp)
+
+file(GLOB_RECURSE STYLES ${TELEGRAM_RESOURCES_DIR}/*.palette ${TELEGRAM_RESOURCES_DIR}/*.style ${TELEGRAM_SOURCES_DIR}/*.style)
+set(GENERATED_STYLES)
+foreach(STYLE ${STYLES})
+    get_filename_component(STYLE_FILENAME ${STYLE} NAME)
+    get_filename_component(STYLE_NAME ${STYLE} NAME_WE)
+    if (${STYLE} MATCHES \\.palette$)
+        set(THIS_GENERATED_STYLES ${GENERATED_DIR}/styles/palette.h ${GENERATED_DIR}/styles/palette.cpp)
+    else()
+        set(THIS_GENERATED_STYLES ${GENERATED_DIR}/styles/style_${STYLE_NAME}.h ${GENERATED_DIR}/styles/style_${STYLE_NAME}.cpp)
+    endif()
+
+    # style generator does not like '-' in file path, so let's use relative paths...
+    add_custom_command(
+        OUTPUT ${THIS_GENERATED_STYLES}
+        COMMAND ${CMAKE_BINARY_DIR}/codegen_style -IResources -ISourceFiles -o${GENERATED_DIR}/styles ${STYLE}
+        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+        DEPENDS codegen_style ${STYLE}
+        COMMENT "Codegen style ${STYLE_FILENAME}"
+    )
+    set(GENERATED_STYLES ${GENERATED_STYLES} ${THIS_GENERATED_STYLES})
+endforeach()
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_STYLES})
+
+add_custom_command(
+    OUTPUT ${GENERATED_DIR}/emoji.h ${GENERATED_DIR}/emoji.cpp
+    COMMAND ${CMAKE_BINARY_DIR}/codegen_emoji -o${GENERATED_DIR}
+    DEPENDS codegen_emoji
+    COMMENT "Codegen emoji"
+)
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_DIR}/emoji.h)
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_DIR}/emoji.cpp)
+
+add_custom_command(
+    OUTPUT ${GENERATED_DIR}/lang_auto.h ${GENERATED_DIR}/lang_auto.cpp
+    COMMAND ${CMAKE_BINARY_DIR}/codegen_lang -o${GENERATED_DIR} ${TELEGRAM_RESOURCES_DIR}/langs/lang.strings
+    DEPENDS codegen_lang
+    COMMENT "Codegen lang"
+)
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_DIR}/lang_auto.h)
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_DIR}/lang_auto.cpp)
+
+add_custom_command(
+    OUTPUT ${GENERATED_DIR}/numbers.h ${GENERATED_DIR}/numbers.cpp
+    COMMAND ${CMAKE_BINARY_DIR}/codegen_numbers -o${GENERATED_DIR} ${TELEGRAM_RESOURCES_DIR}/numbers.txt
+    DEPENDS codegen_numbers
+    COMMENT "Codegen numbers"
+)
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_DIR}/numbers.h)
+list(APPEND TELEGRAM_GENERATED_SOURCES ${GENERATED_DIR}/numbers.cpp)
+
+add_custom_target(telegram_codegen DEPENDS ${TELEGRAM_GENERATED_SOURCES})
--- /dev/null
+++ b/Telegram/cmake/TelegramCodegenTools.cmake
@@ -0,0 +1,13 @@
+
+file(GLOB CODEGEN_COMMON_SOURCES
+    ${TELEGRAM_SOURCES_DIR}/codegen/common/*.h ${TELEGRAM_SOURCES_DIR}/codegen/common/*.cpp)
+add_library(codegen_common OBJECT ${CODEGEN_COMMON_SOURCES})
+target_include_directories(codegen_common PUBLIC $<TARGET_PROPERTY:Qt5::Core,INTERFACE_INCLUDE_DIRECTORIES>)
+target_compile_options(codegen_common PUBLIC $<TARGET_PROPERTY:Qt5::Core,INTERFACE_COMPILE_OPTIONS>)
+
+foreach(TOOL emoji lang numbers style)
+    file(GLOB CODEGEN_${TOOL}_SOURCES
+        ${TELEGRAM_SOURCES_DIR}/codegen/${TOOL}/*.h ${TELEGRAM_SOURCES_DIR}/codegen/${TOOL}/*.cpp)
+    add_executable(codegen_${TOOL} ${CODEGEN_${TOOL}_SOURCES} $<TARGET_OBJECTS:codegen_common>)
+    target_link_libraries(codegen_${TOOL} Qt5::Core Qt5::Gui)
+endforeach()
